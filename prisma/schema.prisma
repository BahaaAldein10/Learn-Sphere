generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String
  name        String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]
  chapters    Chapter[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  courses   Course[]
  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([courseId])
}

model UserProgress {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clerkId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clerkId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId          String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String
  title       String
  description String

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  views    Int       @default(0)
  likes    Like[]
  disLikes DisLike[]

  answers     Answer[]
  Interaction Interaction[]

  @@index([clerkId])
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId    String
  content    String
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId  String @unique
  username String @unique
  email    String @unique
  picture  String

  role Role @default(STUDENT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId    String
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, clerkId])
}

model DisLike {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId    String
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([questionId, clerkId])
}

model Interaction {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String
  action  String

  questionId String?   @db.ObjectId
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([questionId, clerkId])
}
